{"version":3,"sources":["index.ts"],"names":["NativeModules","Platform","FileAccessNative","FileSystem","appendFile","path","data","encoding","concatFiles","source","target","cp","cpAsset","asset","type","OS","cpExternal","targetName","dir","subDir","df","exists","fetch","resource","init","getAppGroupDir","groupName","Promise","reject","Error","hash","algorithm","isDir","ls","mkdir","mv","readFile","stat","unlink","writeFile","Dirs","RNFileAccess","getConstants"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport { FileAccessNative } from './native';\nimport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n} from './types';\n\nexport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n} from './types';\n\nexport const FileSystem = {\n  /**\n   * Append content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  appendFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.appendFile(path, data, encoding);\n  },\n\n  /**\n   * Append a file to another file.\n   *\n   * Returns number of bytes written.\n   */\n  concatFiles(source: string, target: string) {\n    return FileAccessNative.concatFiles(source, target);\n  },\n\n  /**\n   * Copy a file.\n   */\n  cp(source: string, target: string) {\n    return FileAccessNative.cp(source, target);\n  },\n\n  /**\n   * Copy a bundled asset file.\n   *\n   * When using Android asset type 'resource', include the folder, but skip the\n   * file extension. For example use 'raw/foo', for the file 'res/raw/foo.txt'.\n   * When possible, prefer using the 'assets/' folder; files in 'res/' have\n   * naming restrictions imposed by Android.\n   * https://developer.android.com/guide/topics/resources/providing-resources.html#OriginalFiles\n   */\n  cpAsset(asset: string, target: string, type: AssetType = 'asset') {\n    return Platform.OS === 'android'\n      ? FileAccessNative.cpAsset(asset, target, type)\n      : FileAccessNative.cpAsset(asset, target);\n  },\n\n  /**\n   * Copy a file to an externally controlled location.\n   *\n   * On Android API level < 29, may require permission WRITE_EXTERNAL_STORAGE.\n   */\n  cpExternal(source: string, targetName: string, dir: ExternalDir, subDir: string) {\n    return FileAccessNative.cpExternal(source, targetName, dir, subDir);\n  },\n\n  /**\n   * Check device available space.\n   */\n  df(): Promise<FsStat> {\n    return FileAccessNative.df();\n  },\n\n  /**\n   * Check if a path exists.\n   */\n  exists(path: string) {\n    return FileAccessNative.exists(path);\n  },\n\n  /**\n   * Save a network request to a file.\n   */\n  fetch(\n    resource: string,\n    init: {\n      body?: string;\n      headers?: { [key: string]: string };\n      method?: string;\n      /**\n       * Output path.\n       */\n      path?: string;\n    }\n  ): Promise<FetchResult> {\n    return FileAccessNative.fetch(resource, init);\n  },\n\n  /**\n   * Return the local storage directory for app groups.\n   *\n   * This is an Apple only feature.\n   */\n  getAppGroupDir(groupName: string) {\n    if (Platform.OS !== 'ios' && Platform.OS !== 'macos') {\n      return Promise.reject(\n        new Error('AppGroups are available on Apple devices only')\n      );\n    }\n    return FileAccessNative.getAppGroupDir(groupName);\n  },\n\n  /**\n   * Hash the file content.\n   */\n  hash(path: string, algorithm: HashAlgorithm) {\n    return FileAccessNative.hash(path, algorithm);\n  },\n\n  /**\n   * Check if a path is a directory.\n   */\n  isDir(path: string) {\n    return FileAccessNative.isDir(path);\n  },\n\n  /**\n   * List files in a directory.\n   */\n  ls(path: string) {\n    return FileAccessNative.ls(path);\n  },\n\n  /**\n   * Make a new directory.\n   */\n  mkdir(path: string) {\n    return FileAccessNative.mkdir(path);\n  },\n\n  /**\n   * Move a file.\n   */\n  mv(source: string, target: string) {\n    return FileAccessNative.mv(source, target);\n  },\n\n  /**\n   * Read the content of a file.\n   */\n  readFile(path: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.readFile(path, encoding);\n  },\n\n  /**\n   * Read file metadata.\n   */\n  stat(path: string): Promise<FileStat> {\n    return FileAccessNative.stat(path);\n  },\n\n  /**\n   * Delete a file.\n   */\n  unlink(path: string) {\n    return FileAccessNative.unlink(path);\n  },\n\n  /**\n   * Write content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  writeFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.writeFile(path, data, encoding);\n  },\n};\n\n/**\n * Directory constants.\n */\nexport const Dirs: {\n  /**\n   * Temporary files. System/user may delete these if device storage is low.\n   */\n  CacheDir: string;\n\n  /**\n   * System recommended location for SQLite files.\n   *\n   * Android only.\n   */\n  DatabaseDir?: string;\n\n  /**\n   * Persistent data. Generally user created content.\n   */\n  DocumentDir: string;\n\n  /**\n   * Persistent app internal data.\n   *\n   * iOS only.\n   */\n  LibraryDir?: string;\n\n  /**\n   * App's default root directory.\n   */\n  MainBundleDir: string;\n\n  /**\n   * Root path to removable media. Prefer `cpExternal()` when possible, as\n   * Android discourages this access method.\n   *\n   * Android only.\n   */\n  SDCardDir?: string;\n} = NativeModules.RNFileAccess?.getConstants();\n"]}