{"version":3,"sources":["native.ts"],"names":["FileAccessNative","NativeModules","RNFileAccess"],"mappings":";;;;;;;AAAA;;AAmDA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,gBAAgC,GAAGC,2BAAcC,YAAvD","sourcesContent":["import { NativeModules } from 'react-native';\nimport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n} from './types';\n\ntype FileAccessType = {\n  appendFile(path: string, data: string, encoding: Encoding): Promise<void>;\n  concatFiles(source: string, target: string): Promise<number>;\n  cp(source: string, target: string): Promise<void>;\n  /**\n   * `type` only used on Android.\n   */\n  cpAsset(asset: string, target: string, type?: AssetType): Promise<void>;\n  cpExternal(\n    source: string,\n    targetName: string,\n    dir: ExternalDir,\n    subDir: string\n  ): Promise<void>;\n  df(): Promise<FsStat>;\n  exists(path: string): Promise<boolean>;\n  fetch(\n    resource: string,\n    init: {\n      body?: string;\n      headers?: { [key: string]: string };\n      method?: string;\n      path?: string;\n    }\n  ): Promise<FetchResult>;\n  /**\n   * Only defined on iOS.\n   */\n  getAppGroupDir(groupName: string): Promise<string>;\n  hash(path: string, algorithm: HashAlgorithm): Promise<string>;\n  isDir(path: string): Promise<boolean>;\n  ls(path: string): Promise<string[]>;\n  mkdir(path: string): Promise<void>;\n  mv(source: string, target: string): Promise<void>;\n  readFile(path: string, encoding: Encoding): Promise<string>;\n  stat(path: string): Promise<FileStat>;\n  unlink(path: string): Promise<void>;\n  writeFile(path: string, data: string, encoding: Encoding): Promise<void>;\n};\n\n/**\n * Native module API.\n *\n * Most functions are the same as the JS wrapper. However native calls do\n * not support default parameters.\n */\nexport const FileAccessNative: FileAccessType = NativeModules.RNFileAccess;\n"]}