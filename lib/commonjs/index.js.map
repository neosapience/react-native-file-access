{"version":3,"sources":["index.ts"],"names":["FileSystem","appendFile","path","data","encoding","FileAccessNative","concatFiles","source","target","cp","cpAsset","asset","type","Platform","OS","cpExternal","targetName","dir","subDir","df","exists","fetch","resource","init","getAppGroupDir","groupName","Promise","reject","Error","hash","algorithm","isDir","ls","mkdir","mv","readFile","stat","unlink","writeFile","Dirs","NativeModules","RNFileAccess","getConstants"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport { FileAccessNative } from './native';\nimport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n} from './types';\n\nexport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n} from './types';\n\nexport const FileSystem = {\n  /**\n   * Append content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  appendFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.appendFile(path, data, encoding);\n  },\n\n  /**\n   * Append a file to another file.\n   *\n   * Returns number of bytes written.\n   */\n  concatFiles(source: string, target: string) {\n    return FileAccessNative.concatFiles(source, target);\n  },\n\n  /**\n   * Copy a file.\n   */\n  cp(source: string, target: string) {\n    return FileAccessNative.cp(source, target);\n  },\n\n  /**\n   * Copy a bundled asset file.\n   *\n   * When using Android asset type 'resource', include the folder, but skip the\n   * file extension. For example use 'raw/foo', for the file 'res/raw/foo.txt'.\n   * When possible, prefer using the 'assets/' folder; files in 'res/' have\n   * naming restrictions imposed by Android.\n   * https://developer.android.com/guide/topics/resources/providing-resources.html#OriginalFiles\n   */\n  cpAsset(asset: string, target: string, type: AssetType = 'asset') {\n    return Platform.OS === 'android'\n      ? FileAccessNative.cpAsset(asset, target, type)\n      : FileAccessNative.cpAsset(asset, target);\n  },\n\n  /**\n   * Copy a file to an externally controlled location.\n   *\n   * On Android API level < 29, may require permission WRITE_EXTERNAL_STORAGE.\n   */\n  cpExternal(\n    source: string,\n    targetName: string,\n    dir: ExternalDir,\n    subDir: string\n  ) {\n    return FileAccessNative.cpExternal(source, targetName, dir, subDir);\n  },\n\n  /**\n   * Check device available space.\n   */\n  df(): Promise<FsStat> {\n    return FileAccessNative.df();\n  },\n\n  /**\n   * Check if a path exists.\n   */\n  exists(path: string) {\n    return FileAccessNative.exists(path);\n  },\n\n  /**\n   * Save a network request to a file.\n   */\n  fetch(\n    resource: string,\n    init: {\n      body?: string;\n      headers?: { [key: string]: string };\n      method?: string;\n      /**\n       * Output path.\n       */\n      path?: string;\n    }\n  ): Promise<FetchResult> {\n    return FileAccessNative.fetch(resource, init);\n  },\n\n  /**\n   * Return the local storage directory for app groups.\n   *\n   * This is an Apple only feature.\n   */\n  getAppGroupDir(groupName: string) {\n    if (Platform.OS !== 'ios' && Platform.OS !== 'macos') {\n      return Promise.reject(\n        new Error('AppGroups are available on Apple devices only')\n      );\n    }\n    return FileAccessNative.getAppGroupDir(groupName);\n  },\n\n  /**\n   * Hash the file content.\n   */\n  hash(path: string, algorithm: HashAlgorithm) {\n    return FileAccessNative.hash(path, algorithm);\n  },\n\n  /**\n   * Check if a path is a directory.\n   */\n  isDir(path: string) {\n    return FileAccessNative.isDir(path);\n  },\n\n  /**\n   * List files in a directory.\n   */\n  ls(path: string) {\n    return FileAccessNative.ls(path);\n  },\n\n  /**\n   * Make a new directory.\n   */\n  mkdir(path: string) {\n    return FileAccessNative.mkdir(path);\n  },\n\n  /**\n   * Move a file.\n   */\n  mv(source: string, target: string) {\n    return FileAccessNative.mv(source, target);\n  },\n\n  /**\n   * Read the content of a file.\n   */\n  readFile(path: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.readFile(path, encoding);\n  },\n\n  /**\n   * Read file metadata.\n   */\n  stat(path: string): Promise<FileStat> {\n    return FileAccessNative.stat(path);\n  },\n\n  /**\n   * Delete a file.\n   */\n  unlink(path: string) {\n    return FileAccessNative.unlink(path);\n  },\n\n  /**\n   * Write content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  writeFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.writeFile(path, data, encoding);\n  },\n};\n\n/**\n * Directory constants.\n */\nexport const Dirs: {\n  /**\n   * Temporary files. System/user may delete these if device storage is low.\n   */\n  CacheDir: string;\n\n  /**\n   * System recommended location for SQLite files.\n   *\n   * Android only.\n   */\n  DatabaseDir?: string;\n\n  /**\n   * Persistent data. Generally user created content.\n   */\n  DocumentDir: string;\n\n  /**\n   * Persistent app internal data.\n   *\n   * iOS only.\n   */\n  LibraryDir?: string;\n\n  /**\n   * App's default root directory.\n   */\n  MainBundleDir: string;\n\n  /**\n   * Root path to removable media. Prefer `cpExternal()` when possible, as\n   * Android discourages this access method.\n   *\n   * Android only.\n   */\n  SDCardDir?: string;\n} = NativeModules.RNFileAccess?.getConstants();\n"]}